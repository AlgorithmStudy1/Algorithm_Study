**********************************************
Tier : Silver 3
Link : https://www.acmicpc.net/problem/18290

1. N과 M의 2차원 배열 형태로 해결
2. 사방을 확인하며 주변에 갈 수 있는 경우에만 함수 적용
3. 그냥 하면 시간초과, 함수의 인자로 px를 추가시켜 맨 처음부터 재확인하는 것을 방지
**********************************************

n, m, k = map(int,input().split())
a = [list(map(int,input().split())) for _ in range(n)]
c = [[False]*m for _ in range(n)]
ans = -2147483647
dx = [0,0,1,-1]
dy = [1,-1,0,0]

def go(px, cnt, s):
    if cnt == k:
        global ans
        if ans < s:
            ans = s
        return
    for x in range(px, n):
        for y in range(m):
            if c[x][y]:
                continue
            ok = True
            for i in range(4):
                nx, ny = x+dx[i], y+dy[i]
                if 0 <= nx < n and 0 <= ny < m:
                    if c[nx][ny]:
                        ok = False
            if ok:
                c[x][y] = True
                go(x,cnt+1, s+a[x][y])
                c[x][y] = False

go(0, 0, 0)
print(ans)
